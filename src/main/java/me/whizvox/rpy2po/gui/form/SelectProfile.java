package me.whizvox.rpy2po.gui.form;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import me.whizvox.rpy2po.core.FileUtils;
import me.whizvox.rpy2po.core.Profile;
import me.whizvox.rpy2po.gui.DocumentChangedListener;
import me.whizvox.rpy2po.gui.ProfileSelection;
import me.whizvox.rpy2po.gui.RPY2PO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.swing.*;
import java.awt.*;
import java.io.IOException;
import java.lang.reflect.Method;
import java.nio.file.FileVisitResult;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.SimpleFileVisitor;
import java.nio.file.attribute.BasicFileAttributes;
import java.time.LocalDateTime;
import java.util.Objects;
import java.util.ResourceBundle;

public class SelectProfile extends JFrame {

  private static final Logger LOGGER = LoggerFactory.getLogger(SelectProfile.class);

  private JPanel contentPane;
  private JScrollPane scrollPane;
  private JTextField textFieldSearch;
  private JButton buttonLoad;
  private JButton buttonDelete;
  private JButton buttonCreate;
  private ProfileSelection profileSelection;

  public SelectProfile() {
    $$$setupUI$$$();
    setContentPane(contentPane);

    buttonCreate.addActionListener(e -> RPY2PO.inst().setFrame(NewProfile::new, "Create Profile", null));
    profileSelection.updateCaches(RPY2PO.inst().getProfiles());
    profileSelection.setProfileSelectedListener(source -> {
      boolean enable = source != null && source.isSelected();
      buttonLoad.setEnabled(enable);
      buttonDelete.setEnabled(enable);
    });
    textFieldSearch.getDocument().addDocumentListener((DocumentChangedListener) event -> {
      profileSelection.filterProfiles(textFieldSearch.getText().trim());
    });
    buttonDelete.addActionListener(e -> deleteProfile());
    buttonLoad.addActionListener(e -> openProfile());
  }

  private void deleteProfile() {
    Profile profile = profileSelection.getSelectedProfile();
    if (profile != null) {
      String confirm = JOptionPane.showInputDialog(this, "Are you sure you want to delete this profile? This will delete all files located in \"" + profile.getBaseDirectory() + "\", and cannot be undone!\nType the name of the profile, \"" + profile.getName() + "\" to confirm.", "Warning!", JOptionPane.WARNING_MESSAGE);
      if (Objects.equals(confirm, profile.getName())) {
        LOGGER.info("Deleting profile {} in {}...", profile.getName(), profile.getBaseDirectory());
        try {
          FileUtils.deleteDirectory(profile.getBaseDirectory());
        } catch (IOException ex) {
          LOGGER.error("Could not delete directory {}", profile.getBaseDirectory(), ex);
          JOptionPane.showMessageDialog(this, "Could not delete profile!\n" + ex.getClass() + " " + ex.getMessage(), "Error!", JOptionPane.ERROR_MESSAGE);
          return;
        }
        JOptionPane.showMessageDialog(this, "Profile has been deleted", "Alert", JOptionPane.INFORMATION_MESSAGE);
        RPY2PO.inst().removeProfile(profile.getBaseDirectory());
        profileSelection.updateCaches(RPY2PO.inst().getProfiles());
      } else {
        JOptionPane.showMessageDialog(this, "Deletion operation has been cancelled.", "Alert", JOptionPane.INFORMATION_MESSAGE);
      }
    }
  }

  private void openProfile() {
    Profile selected = profileSelection.getSelectedProfile();
    selected.setLastOpened(LocalDateTime.now());
    try {
      RPY2PO.inst().writeJson(selected.getFile(), selected);
      RPY2PO.inst().setFrame(() -> new ProfileActions(selected), selected.getName(), null);
    } catch (IOException e) {
      LOGGER.error("Could not update saved profile entry", e);
    }
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer
   * >>> IMPORTANT!! <<<
   * DO NOT edit this method OR call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    contentPane = new JPanel();
    contentPane.setLayout(new GridLayoutManager(3, 2, new Insets(10, 10, 10, 10), -1, -1));
    scrollPane = new JScrollPane();
    scrollPane.setHorizontalScrollBarPolicy(31);
    contentPane.add(scrollPane, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    scrollPane.setViewportView(profileSelection);
    textFieldSearch = new JTextField();
    textFieldSearch.setText("");
    textFieldSearch.setToolTipText("");
    contentPane.add(textFieldSearch, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
    final JLabel label1 = new JLabel();
    this.$$$loadLabelText$$$(label1, this.$$$getMessageFromBundle$$$("strings", "label.searchProfiles"));
    contentPane.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
    contentPane.add(panel1, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
    buttonLoad = new JButton();
    buttonLoad.setEnabled(false);
    this.$$$loadButtonText$$$(buttonLoad, this.$$$getMessageFromBundle$$$("strings", "button.open"));
    panel1.add(buttonLoad, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    final Spacer spacer1 = new Spacer();
    panel1.add(spacer1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    buttonDelete = new JButton();
    buttonDelete.setEnabled(false);
    this.$$$loadButtonText$$$(buttonDelete, this.$$$getMessageFromBundle$$$("strings", "button.delete"));
    panel1.add(buttonDelete, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    buttonCreate = new JButton();
    this.$$$loadButtonText$$$(buttonCreate, this.$$$getMessageFromBundle$$$("strings", "button.createNew"));
    panel1.add(buttonCreate, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
  }

  private static Method $$$cachedGetBundleMethod$$$ = null;

  private String $$$getMessageFromBundle$$$(String path, String key) {
    ResourceBundle bundle;
    try {
      Class<?> thisClass = this.getClass();
      if ($$$cachedGetBundleMethod$$$ == null) {
        Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
        $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
      }
      bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
    } catch (Exception e) {
      bundle = ResourceBundle.getBundle(path);
    }
    return bundle.getString(key);
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadLabelText$$$(JLabel component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setDisplayedMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  private void $$$loadButtonText$$$(AbstractButton component, String text) {
    StringBuffer result = new StringBuffer();
    boolean haveMnemonic = false;
    char mnemonic = '\0';
    int mnemonicIndex = -1;
    for (int i = 0; i < text.length(); i++) {
      if (text.charAt(i) == '&') {
        i++;
        if (i == text.length()) break;
        if (!haveMnemonic && text.charAt(i) != '&') {
          haveMnemonic = true;
          mnemonic = text.charAt(i);
          mnemonicIndex = result.length();
        }
      }
      result.append(text.charAt(i));
    }
    component.setText(result.toString());
    if (haveMnemonic) {
      component.setMnemonic(mnemonic);
      component.setDisplayedMnemonicIndex(mnemonicIndex);
    }
  }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
    return contentPane;
  }

  private void createUIComponents() {
    profileSelection = new ProfileSelection();
  }

}
